name: CI wheels and publish

on:
  push:
    branches: [main]
    tags:
      - "v*"
  pull_request:
    branches: [main]

jobs:
  build_wheels:
    name: Build wheels (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-13, macos-14]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install cibuildwheel
        run: |
          python -m pip install --upgrade pip
          python -m pip install cibuildwheel

      - name: Build wheels with cibuildwheel
        env:
          CIBW_BUILD_VERBOSITY: 1
          CIBW_BUILD: cp310-* cp311-* cp312-* cp313-*
          # Pass-through external repair: just copy the already-repaired wheel
          CIBW_REPAIR_WHEEL_COMMAND: "bash -lc 'cp {wheel} {dest_dir}'"
          # Install autotools in manylinux containers before building
          CIBW_BEFORE_ALL_LINUX: |
            yum install -y autoconf automake libtool pkgconfig git curl || \
            (dnf install -y autoconf automake libtool pkgconfig git curl || true)
          # Arch selection
          CIBW_ARCHS_LINUX: x86_64
          CIBW_ARCHS_MACOS: ${{ matrix.os == 'macos-13' && 'x86_64' || matrix.os == 'macos-14' && 'arm64' || '' }}
        run: python -m cibuildwheel --output-dir wheelhouse

      - name: Upload wheel artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: wheelhouse/*.whl
          if-no-files-found: error

  publish:
    if: startsWith(github.ref, 'refs/tags/v')
    name: Publish to PyPI
    needs: [build_wheels]
    runs-on: ubuntu-latest
    steps:
      - name: Download wheel artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          merge-multiple: true
          path: dist-all

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Build sdist
        run: |
          python -m pip install --upgrade pip build
          python -m build --sdist
          mkdir -p dist-all
          cp dist/*.tar.gz dist-all/

      - name: List artifacts
        run: ls -l dist-all

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages-dir: dist-all
          skip-existing: true
