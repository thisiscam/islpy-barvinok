name: CI wheels and publish

on:
  push:
    branches: [main]
    tags:
      - "v*"
  pull_request:
    branches: [main]

jobs:
  build_wheels:
    name: Build wheels (${{ matrix.os }} / ${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - { os: ubuntu-latest, arch: x86_64 }
          - { os: ubuntu-latest, arch: aarch64 }
          - { os: macos-13, arch: x86_64 }
          - { os: macos-14, arch: arm64 }

    steps:
      - uses: actions/checkout@v4

      - name: Cache pip downloads
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Restore compiled prefix cache (GMP/NTL/Barvinok)
        id: restore-prefix
        uses: actions/cache/restore@v4
        with:
          path: ${{ github.workspace }}/build/prefix
          key: prefix-${{ matrix.os }}-${{ matrix.arch }}-gmp-6.3.0-ntl-10.5.0-barvinok-0.41.8
          restore-keys: |
            prefix-${{ matrix.os }}-${{ matrix.arch }}-

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install cibuildwheel
        run: |
          python -m pip install --upgrade pip
          python -m pip install cibuildwheel

      - name: Enable QEMU for cross-architecture builds (Linux aarch64)
        if: runner.os == 'Linux' && matrix.arch == 'aarch64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Build wheels with cibuildwheel
        env:
          CIBW_BUILD_VERBOSITY: 1
          CIBW_BUILD: cp310-* cp311-* cp312-* cp313-*
          # We repair inside scripts/build_all.sh for both OSes; pass-through here
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: "bash -lc 'cp {wheel} {dest_dir}'"
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: "bash -lc 'cp {wheel} {dest_dir}'"
          BUILD_ROOT: ${{ github.workspace }}/build
          CIBW_ENVIRONMENT_LINUX: BUILD_ROOT=/host${{ github.workspace }}/build/
          # Install autotools in manylinux containers before building
          CIBW_BEFORE_ALL_LINUX: |
            yum install -y autoconf automake libtool pkgconfig git curl || \
            (dnf install -y autoconf automake libtool pkgconfig git curl || true)
          # Arch selection per platform
          CIBW_ARCHS_LINUX: ${{ matrix.os == 'ubuntu-latest' && matrix.arch || '' }}
          CIBW_MANYLINUX_AARCH64_IMAGE: quay.io/pypa/manylinux2014_aarch64
          CIBW_ARCHS_MACOS: ${{ startsWith(matrix.os, 'macos-') && matrix.arch || '' }}
        run: |
          python -m cibuildwheel --output-dir wheelhouse

      - name: Save compiled prefix cache (GMP/NTL/Barvinok)
        if: always()
        uses: actions/cache/save@v4
        with:
          path: ${{ github.workspace }}/build/prefix
          key: prefix-${{ matrix.os }}-${{ matrix.arch }}-gmp-6.3.0-ntl-10.5.0-barvinok-0.41.8

      - name: Upload wheel artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.arch }}
          path: wheelhouse/*.whl
          if-no-files-found: error

  publish:
    if: startsWith(github.ref, 'refs/tags/v')
    name: Publish to PyPI
    needs: [build_wheels]
    runs-on: ubuntu-latest
    permissions:
      id-token: write # Required for PyPI Trusted Publishing (OIDC)
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Download wheel artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          merge-multiple: true
          path: dist-all

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Build sdist
        run: |
          python -m pip install --upgrade pip build
          python -m build --sdist
          mkdir -p dist-all
          cp dist/*.tar.gz dist-all/

      - name: List artifacts
        run: ls -l dist-all

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist-all
          skip-existing: true
